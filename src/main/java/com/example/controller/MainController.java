package com.example.controller;

import com.example.model.User;
import com.example.model.blog.Post;
import com.example.repos.PostRepository;
import com.example.repos.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.view.RedirectView;

import java.util.*;

@Controller // This means that this class is a Controller
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private PostRepository postRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping("/generate")
    public String generate() {
        User n = new User();
        n.setName("random");
        n.setEmail("random@mail.ru");
        userRepository.save(n);
        return "hello";
    }

    @GetMapping("/registration")
    public String registration() {
        return "registration";
    }

    @PostMapping("/registration")
    public String addUser(User user, Map<String, Object> model) {
        userRepository.save(user);

        return "redirect:/registration";
    }

    @GetMapping("/addPost")
    public String addPost(){
        return "post";
    }

    @PostMapping("/addPost")
    public RedirectView addPost(@RequestParam String header, @RequestParam String content){
        Post post = new Post();
        post.setHeader(header);
        post.setContent(content);

        postRepository.save(post);
        return new RedirectView("/allPosts");
    }

//    @PostMapping("/postObserver/{postId}")
//    public RedirectView observePost(@PathVariable("postId") int postId){
//        return new RedirectView("/postObserver/{postId}");
//    }

    @GetMapping("/postObserver/{postId}")
    public String observePost(@PathVariable("postId") int postId, String submit, Model model){
        model.addAttribute("post", (Post)postRepository.findById(postId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid post Id:" + postId)));
        return "postObserver";
    }

    @GetMapping("/deletePost/{postId}")
    public RedirectView deletePost(@PathVariable("postId") int postId){
        postRepository.deleteById(postId);
        return new RedirectView("/allPosts");
    }

    @GetMapping("/editPost/{postId}")
    public String editPost(@PathVariable("postId") int postId, Model model){
        model.addAttribute("post", (Post)postRepository.findById(postId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid post Id:" + postId)));
        return "editPost";
    }

    @GetMapping("/allPosts")
    public String getAllPosts(Model model){
        List<Post> posts = new ArrayList<>();
        Iterable<Post> it = postRepository.findAll();
        it.forEach(posts::add);
        model.addAttribute("posts", posts);
        return "blogPage";
    }
}
